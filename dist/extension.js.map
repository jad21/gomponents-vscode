{"version":3,"file":"extension.js","mappings":"0BAAA,MAAMA,EAAS,EAAQ,KA4LvBC,EAAOC,QAAU,CACfC,SAzLF,SAAkBC,GAChBC,QAAQC,IAAI,kDAEZ,IAAIC,EAAaP,EAAOQ,SAASC,gBAAgB,oCAAoC,WACnF,MAAMC,EAASV,EAAOW,OAAOC,iBAC7B,GAAIF,EAAQ,CAEV,MAAMG,EAAYH,EAAOG,UACnBC,EAAOJ,EAAOK,SAASC,QAAQH,GAErCR,QAAQC,IAAI,iBAAkBQ,GAE9B,MAAMG,EAgHZ,SAAgCC,GAK9B,SAASC,EAAaC,GACpB,IAAIC,EAAUD,EAAIE,MAAM,WAAW,GAC/BC,EAAaH,EAAIE,MAAM,oBACvBE,EAAkBD,EAAaA,EAAWE,KAAIC,IAChD,IAAKC,EAAKC,GAASF,EAAKG,MAAM,KAC9B,MAAO,GAAGC,EAAWH,OAASC,EAAMG,QAAQ,KAAM,OAAO,IACxDC,KAAK,MAAQ,GAEhB,MAAO,GAAGF,EAAWT,MAAYG,IAAkBA,EAAkB,KAAO,IAC9E,CAGA,SAASM,EAAWG,GAClB,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,EACnD,CAjBAlB,EAAOA,EAAKa,QAAQ,MAAO,IAAIA,QAAQ,UAAW,KAyBlD,IAGIT,EAHAe,EAAS,GACTC,EAAQ,GACRC,EAAQ,2BAGZ,KAAsC,QAA9BjB,EAAQiB,EAAMC,KAAKtB,KACzB,GAAII,EAAM,GAAGmB,WAAW,MAEtBJ,GAAU,IACVC,EAAMI,WACD,GAAIpB,EAAM,GAAGmB,WAAW,KAAM,CAEnC,IAAIE,EAAiBxB,EAAaG,EAAM,IACxCe,GAAU,GAAGC,EAAMM,OAAS,KAAO,KAAK,OAAOC,OAAOP,EAAMM,UAAUD,IACtEL,EAAMQ,KAAKH,EACb,MAEEN,IAtBgBU,EAsBKzB,EAAM,IArBd0B,OAAS,WAAWD,EAAQC,WAAa,GA0B1D,IA3BA,IAAoBD,EA2BbT,EAAMM,QACXP,GAAU,IACVC,EAAMI,MAGR,OAAOL,CACT,CAvK4BY,CAAuBnC,GAE7CT,QAAQC,IAAI,kBAAmBW,GAE/BP,EAAOwC,MAAKC,IACVA,EAAYpB,QAAQlB,EAAWI,EAAc,GAEjD,CACF,IAEAb,EAAQgD,cAAcN,KAAKvC,EAC7B,EAmKE8C,WAJF,WAAwB,E,uBC1LxBpD,EAAOC,QAAUoD,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAazD,QAGrB,IAAID,EAASsD,EAAyBG,GAAY,CAGjDxD,QAAS,CAAC,GAOX,OAHA2D,EAAoBH,GAAUzD,EAAQA,EAAOC,QAASuD,GAG/CxD,EAAOC,OACf,CCnB0BuD,CAAoB,I","sources":["webpack://gomponents-ext/./src/extension.js","webpack://gomponents-ext/external commonjs \"vscode\"","webpack://gomponents-ext/webpack/bootstrap","webpack://gomponents-ext/webpack/startup"],"sourcesContent":["const vscode = require('vscode');\n// const { JSDOM } = require('jsdom');\n\n\nfunction activate(context) {\n  console.log('Extension \"go-syntax-extension\" is now active!');\n\n  let disposable = vscode.commands.registerCommand('extension.convertHtmlToGomponent', function () {\n    const editor = vscode.window.activeTextEditor;\n    if (editor) {\n      \n      const selection = editor.selection;\n      const text = editor.document.getText(selection);\n\n      console.log('Selected text:', text);\n\n      const convertedText = convertHtmlToGomponent(text);\n\n      console.log('Converted text:', convertedText);\n\n      editor.edit(editBuilder => {\n        editBuilder.replace(selection, convertedText);\n      });\n    }\n  });\n\n  context.subscriptions.push(disposable);\n}\n\nfunction titleCase(str) {\n  return str.toLowerCase().replace(/\\b\\w/g, s => s.toUpperCase());\n}\n\n// function convertHtmlToGomponent(html) {\n//   const regex = /<(\\w+)([^>]*)>(.*?)<\\/\\1>/gs;\n//   if (!regex.test(html)){\n//     return html.trim() ? `g.Text(\"${html.trim() }\")`: \"\"\n//   }\n//   return html.replace(regex, (match, tag, attrs, content) => {\n    \n//     console.info(\"tag\", tag)\n//     console.info(\"attrs\", attrs)\n\n//     const gomponentTag = titleCase(tag)\n//     const gomponentAttrs = attrs.trim() ? `Class(\"${attrs.trim()}\")` : '';\n//     const gomponentContent = convertHtmlToGomponent(content.trim())\n//     return `${gomponentTag}(${gomponentAttrs}${gomponentAttrs && gomponentContent ? ',\\n\\t' : ''}${gomponentContent})`;\n//   });\n// }\n\n// function convertHtmlToGomponent(htmlString, window) {\n//   function titleCase(str) {\n//     return str.toLowerCase().replace(/\\b\\w/g, s => s.toUpperCase());\n//   }\n\n\n//   function createNode(tag, attributes, ...children) {\n//     return {\n//       tag,\n//       attributes,\n//       children\n//     };\n//   }\n\n//   function formatNode(node, level = 0) {\n//     let tabs = \"\"\n//     for (let i = 0; i < level; i++) {\n//       tabs += \"\\t\"\n//     }\n//     if (typeof node === \"string\") {\n//       if (node.includes(\"{\")){\n//         return `${tabs}g.Raw(\\`${node}\\`)`;\n//       }else{\n//         return `${tabs}g.Text(\\`${node}\\`)`;\n//       }\n//     }\n//     const formattedTag = titleCase(node.tag);\n//     const formattedAttributes = node.attributes\n//     ? Object.entries(node.attributes)\n//     .map(([key, value]) => {\n//       if (key.includes(\"-\")) {\n//         return `g.Attr(\"${key}\", \"${value}\")`;\n//       }else{\n//         return `${titleCase(key)}(\"${value}\")`\n//       }\n\n//         }).join(\", \")\n//       : \"\";\n\n//     const formattedChildren = node.children.map(child => formatNode(child, level + 1)).join(`,\\n${tabs}`);\n\n//     return `${tabs}${formattedTag}(${formattedAttributes}${formattedAttributes ? ', ' : ''}\\n${tabs}${formattedChildren}\\n${tabs})`;\n//   }\n\n//   function parseHtml(htmlString) {\n//     try {\n//       const parser = new window.DOMParser();\n//       const doc = parser.parseFromString(htmlString, 'text/html');\n//       const dom = new JSDOM(htmlString);\n//       return convertElement(document.body.firstChild ? document.body.firstChild : document.head.firstChild);\n//       // const document = dom.window.document;\n//       // return convertElement(document.body.firstChild ? document.body.firstChild : document.head.firstChild);\n//     } catch (error) {\n//       console.error(error)\n//       throw error\n//     }\n//   }\n\n//   function convertElement(element) {\n//     const tagName = element.tagName //.toLowerCase();\n//     const attributes = {};\n//     try {\n//       for (const attr of element.attributes) {\n//         attributes[attr.name] = attr.value;\n//       }\n//     } catch (error) { }\n//     const children = Array.from(element.childNodes).map(child => {\n//       return child.nodeType == 3 ? child.nodeValue.trim(): convertElement(child);\n//     }).filter(child => child != \"\");\n\n//     return createNode(tagName, attributes, ...children);\n//   }\n\n//   const parsedHtml = parseHtml(htmlString);\n//   return formatNode(parsedHtml, level = 0);\n// }\n\n\nfunction convertHtmlToGomponent(html) {\n  // Eliminar saltos de línea y espacios en blanco innecesarios\n  html = html.replace(/\\n/g, '').replace(/\\s{2,}/g, ' ');\n\n  // Función para transformar etiquetas y atributos\n  function transformTag(tag) {\n    let tagName = tag.match(/^<(\\w+)/)[1];\n    let attributes = tag.match(/(\\w+)=\"([^\"]*)\"/g);\n    let attributeString = attributes ? attributes.map(attr => {\n      let [key, value] = attr.split('=');\n      return `${capitalize(key)}(\"${value.replace(/\"/g, '')}\")`;\n    }).join(', ') : '';\n\n    return `${capitalize(tagName)}(${attributeString}${attributeString ? ', ' : ''}`;\n  }\n\n  // Función para capitalizar la primera letra de una palabra\n  function capitalize(word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }\n\n  // Función para manejar el contenido de texto\n  function handleText(content) {\n    return content.trim() ? `g.Text(\"${content.trim()}\")` : \"\";\n  }\n\n  // Transformar el HTML usando regex\n  let output = '';\n  let stack = [];\n  let regex = /<\\/?(\\w+)[^>]*>|([^<]+)/g;\n  let match;\n\n  while ((match = regex.exec(html)) !== null) {\n    if (match[0].startsWith('</')) {\n      // Etiqueta de cierre\n      output += ')';\n      stack.pop();\n    } else if (match[0].startsWith('<')) {\n      // Etiqueta de apertura\n      let transformedTag = transformTag(match[0]);\n      output += `${stack.length ? '\\n' : ''}${'    '.repeat(stack.length)}${transformedTag}`;\n      stack.push(transformedTag);\n    } else {\n      // Contenido de texto\n      output += handleText(match[0]);\n    }\n  }\n\n  // Cerrar las etiquetas abiertas\n  while (stack.length) {\n    output += ')';\n    stack.pop();\n  }\n\n  return output;\n}\n\n\nfunction deactivate() { }\n\nmodule.exports = {\n  activate,\n  deactivate\n};\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(83);\n"],"names":["vscode","module","exports","activate","context","console","log","disposable","commands","registerCommand","editor","window","activeTextEditor","selection","text","document","getText","convertedText","html","transformTag","tag","tagName","match","attributes","attributeString","map","attr","key","value","split","capitalize","replace","join","word","charAt","toUpperCase","slice","output","stack","regex","exec","startsWith","pop","transformedTag","length","repeat","push","content","trim","convertHtmlToGomponent","edit","editBuilder","subscriptions","deactivate","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}